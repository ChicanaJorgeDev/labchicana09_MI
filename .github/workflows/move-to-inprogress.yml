name: Move issue to In Progress when PR references it
on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

jobs:
  move_issue_in_progress:
    runs-on: ubuntu-latest

    steps:
      - name: Extract referenced issue number
        id: extract
        run: |
          ISSUE=$(echo "${{ github.event.pull_request.body }}" | grep -oE '#[0-9]+' | head -n1 | tr -d '#')
          echo "issue_number=$ISSUE" >> $GITHUB_ENV

      - name: Move referenced issue to In Progress in GitHub Project
        if: env.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = process.env.issue_number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const projectTitle = "Desarrollo App Nutricional (Chicana)"; // <-- nombre exacto del proyecto
            const desiredStatus = "In Progress";      // <-- estado al que se mover√°

            // üîç 1. Buscar el proyecto y sus campos
            const queryProject = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsV2(first: 20) {
                    nodes {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          id
                          name
                          dataType
                          ... on ProjectV2SingleSelectField {
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const result = await github.graphql(queryProject, { owner, repo });

            const project = result.repository.projectsV2.nodes.find(p => p.title === projectTitle);
            if (!project) {
              core.warning("‚ö†Ô∏è No se encontr√≥ el proyecto con el nombre indicado.");
              return;
            }

            // üß© 2. Buscar el campo de estado
            const statusField = project.fields.nodes.find(f => f.name === "Status" || f.name === "Estado");
            if (!statusField) {
              core.warning("‚ö†Ô∏è No se encontr√≥ el campo de estado (Status/Estado).");
              return;
            }

            // üîÅ 3. Buscar la opci√≥n ‚ÄúIn Progress‚Äù
            const inProgressOption = statusField.options.find(o => o.name === desiredStatus);
            if (!inProgressOption) {
              core.warning(`‚ö†Ô∏è No se encontr√≥ la opci√≥n '${desiredStatus}' en el campo Status.`);
              return;
            }

            // üì¶ 4. Obtener informaci√≥n del issue
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber
            });

            // ‚ûï 5. Agregar issue al proyecto (si no est√°)
            const addItemMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item { id }
                }
              }
            `;
            const added = await github.graphql(addItemMutation, {
              projectId: project.id,
              contentId: issue.node_id
            });

            const itemId = added.addProjectV2ItemById.item.id;

            // üîÑ 6. Actualizar el estado del issue a ‚ÄúIn Progress‚Äù
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `;
            await github.graphql(updateMutation, {
              projectId: project.id,
              itemId,
              fieldId: statusField.id,
              optionId: inProgressOption.id
            });

            console.log(`‚úÖ Issue #${issueNumber} movido a '${desiredStatus}' en el proyecto '${projectTitle}'.`);
